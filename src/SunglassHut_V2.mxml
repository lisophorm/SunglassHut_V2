<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" firstView="views.ScanWristband" 
							splashScreenImage="@Embed('assets/images/splashimage.png')"
                            applicationComplete="onApplicationComplete()" backgroundColor="0x000000"
                            resizeForSoftKeyboard="true" applicationDPI="160" >
	<fx:Script>
		<![CDATA[
        import com.alfo.CleverUrlMonitor;
        import com.alfo.utils.GeoUtils;
        import com.alfo.utils.SQLConnectionWrapper;
        import com.alfo.utils.Uploader;
        import com.alfo.utils.UploaderErrorEvent;

        import events.ApplicationEvent;
        import events.KioskError;
        import events.KioskEvent;
        import events.KioskProgressEvent;
        import events.UserEvent;
        import events.UserObjectEvent;
        import events.ViewEvent;

        import flash.sensors.Geolocation;

        import model.Config;
        import model.MonitorConnection;

        import mx.managers.PopUpManager;

        import spark.transitions.CrossFadeViewTransition;

        import views.ApplicationType;
        import views.CameraCapture;
        import views.FaceBookAuth01;
        import views.FaceBookLogoutOverride;
        import views.LikeApp;
        import views.ScanWristband;
        import views.ScoreCapture;
        import views.SelectUserType;
        import views.TaskCompleteCapture;
        import views.Thankyou;
        import views.UserForm;
        import views.components.ErrorAlert;
        import views.components.ModalAlert;
        import views.components.ProgressPopUp;
        import views.components.tandcWindow;


        public var urn:int = 0;
        public var scoreFormat:String = "99:99"


        protected var pref:Config;
        protected var blinkTimer:Timer;


        public static var APPLICATION_TYPE_REGISTRATION:String = "REGISTRATION";
        public static var APPLICATION_TYPE_PHOTO:String = "PHOTOCAPTURE";
        public static var APPLICATION_TYPE_GREENSCREEN:String = "GREENSCREEN";
        public static var APPLICATION_TYPE_SIMULATOR:String = "SIMULATOR";
        public static var APPLICATION_TYPE_PITSTOP:String = "PITSTOP";
        public static var APPLICATION_TYPE_HELMET:String = "HELMET";

        public static var APPLICATION_TYPE_RACECAR:String = "RACECAR";
        public static var APPLICATION_TYPE_WATERPOOL:String = "WATERPOOL";
        public static var APPLICATION_TYPE_COOKING:String = "COOKING";
        public static var APPLICATION_TYPE_DJ:String = "DJ";


        [Bindable]
        public var ApplicationType:String = "REGISTRATION";

        [Bindable]
        public var barcode:String = null;

        [Bindable]
        public var score:Number = 0;

        [Bindable]
        public var isRegistered:String = "";

        protected var optin_marketing:Boolean = false;
        protected var optin_terms:Boolean = false;

        protected var alertbox:ErrorAlert;
        protected var modalbox:ModalAlert;
        protected var tcWindow:tandcWindow;
        protected var progressWindow:ProgressPopUp;

        protected var fadeTrans:CrossFadeViewTransition = new CrossFadeViewTransition();


        private var geo:Geolocation;

        private var geoUtil:GeoUtils;

        protected var cleverUrlMonitor:CleverUrlMonitor;


        /*
         TO DO:
         -- COMPILATION TABLET: GOOGLE ANDRIOD - MOTOROLA XOOM

         */
        private function traceDisplayList(container:DisplayObjectContainer, indentString:String = ""):void {
            var child:DisplayObject;
            for (var i:uint = 0; i < container.numChildren; i++) {
                child = container.getChildAt(i);

                if (container.getChildAt(i) is Button) {

                }
                if (container.getChildAt(i) is DisplayObjectContainer) {
                    traceDisplayList(DisplayObjectContainer(child), indentString + "    ");
                }
            }
        }

        protected function onExit(e:Event) {
            trace("************ exit");
            //e.preventDefault();
            //e.preventDefault();
            SQLConnectionWrapper.instance.connection.close();
            trace("************ exit");
        }

        protected function onApplicationComplete(e:Event = null):void {

            this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
            NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);
            NativeApplication.nativeApplication.addEventListener(Event.EXITING, onExit)

            // ensures that the instance exists before adding event listeners
            Uploader.instance.toString();
            //
            Uploader.instance.addEventListener(UploaderErrorEvent.ERROR, uploaderErrorHandler);
            Uploader.instance.initialize();
            trace("******* adding error event to uploader");


            NativeApplication.nativeApplication.executeInBackground = true;


            // first time initialization of preferences
            Config.instance.initialized;
            Config.instance.applicationType = Config.instance.applicationType.toUpperCase();

            trace("Submit");


            cleverUrlMonitor = new CleverUrlMonitor("http://" + Config.instance.serverIP + "ping.php");
            cleverUrlMonitor.addEventListener(StatusEvent.STATUS, announceStatus);
            cleverUrlMonitor.start();


            //Display connect symbol
            blinkTimer = new Timer(1000, 0);
            blinkTimer.addEventListener("timer", toggleConnectIcon);
            blinkTimer.start();

            this.navigator.addEventListener(KioskError.ERROR, error);
            this.navigator.addEventListener(KioskError.MODAL, modal);
            this.navigator.addEventListener(ViewEvent.NAVIGATE, doNavigation);
            this.navigator.addEventListener(UserEvent.URN, setBarCode);
            this.navigator.addEventListener(UserEvent.REGISTERED, setIsRegistered);
            this.navigator.addEventListener(UserEvent.OPTIN_MARKETING, setMarketingOptin);
            this.navigator.addEventListener(UserEvent.OPTIN_TERMS, setTermsOptin);

            this.navigator.addEventListener(KioskEvent.TERMS_NOTIFY, openTermsAndCondtions);
            this.navigator.addEventListener(KioskProgressEvent.NOTIFY, notifyProgress);
            this.navigator.addEventListener(KioskProgressEvent.UPDATE, notifyProgressUpdate);
            this.navigator.addEventListener(KioskProgressEvent.UPDATE_COMPLETE, notifyProgressComplete);


        }


        protected function clearPopups(e:Event = null):void {
            try {

                if (alertbox != null) {
                    if (!alertbox.isRemoving)
                        PopUpManager.removePopUp(alertbox);

                }
                if (modalbox != null) {
                    if (!modalbox.isRemoving)
                        PopUpManager.removePopUp(modalbox);

                }
                if (tcWindow != null) {
                    if (!tcWindow.isRemoving)
                        PopUpManager.removePopUp(tcWindow);

                }
                if (progressWindow != null) {
                    PopUpManager.removePopUp(progressWindow);

                }
            } catch (error:Error) {
                trace("*** Error clearing popup - probably when user presses close:\n" + error.message)
            }

        }

        protected function notifyProgressComplete(e:KioskProgressEvent = null):void {
            clearPopups();
        }

        protected function notifyProgress(e:KioskProgressEvent = null):void {

            clearPopups();

            progressWindow = new ProgressPopUp();
            progressWindow.windowTitle = e.title;
            progressWindow.message = e.message;
            progressWindow.exitFunction = e.exitFunction;

            PopUpManager.addPopUp(progressWindow, this, false);
            PopUpManager.centerPopUp(progressWindow);
        }

        protected function notifyProgressUpdate(e:KioskProgressEvent = null):void {


            if (progressWindow == null) {
                notifyProgress(e);

            } else {
                progressWindow.message = e.message;
            }

        }

        protected function openTermsAndCondtions(e:KioskEvent = null):void {


            clearPopups();
            tcWindow = new tandcWindow();

            PopUpManager.addPopUp(tcWindow, this, false);
            PopUpManager.centerPopUp(tcWindow);
        }

        //NAVIGATION HANDLING BETWEEN VIEWS
        protected function doNavigation(e:ViewEvent):void {

            cleverUrlMonitor.checkIt();
            clearPopups();

            trace("************* application type:" + Config.instance.applicationType + "current event:" + e.location);
            switch (e.location) {
                case ViewEvent.LOCATION_RESTART:
                    //this.navigator.popAll();
                    this.navigator.popToFirstView();
                    //this.navigator.popToFirstView(fadeTrans);
                    break;
                case ViewEvent.LOCATION_CONFIG:
                    this.navigator.pushView(views.ApplicationType);
                    break;
                case ViewEvent.LOCATION_SELECT_USER_TYPE:
                    if (this.isRegistered) {
                        if (Config.instance.applicationType == APPLICATION_TYPE_REGISTRATION) {
                            ScanWristband(this.navigator.activeView).init();
                            showError("YOU HAVE ALREADY REGISTERED.", "USER REGISTERED");

                        } else {
                            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME));
                        }
                    } else {
                        this.navigator.pushView(SelectUserType);
                    }
                    break;
                case ViewEvent.LOCATION_FACEBOOK:
                    if (!isFacebookRegistered) {
                        this.navigator.pushView(FaceBookAuth01, {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
                    } else {
                        this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME));
                    }
                    break;
                case ViewEvent.LOCATION_STANDARD_REGISTRATION:
                    if (!isStandardRegistered) {
                        this.navigator.pushView(UserForm, {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
                    } else {

                        this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME));

                    }
                    break;
                case ViewEvent.LOCATION_FACEBOOK_REGISTERED:

                    this.navigator.dispatchEvent(new UserEvent(UserEvent.REGISTERED, "facebook"));
                    this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_REGISTRATION_COMPLETE));

                    //	this.navigator.pushView(views.ExtraInfo, {urn: barcode});
                    break;
                case ViewEvent.LOCATION_TEAM_SELECTED:

                    this.navigator.popView();

                    break;


                case ViewEvent.LOCATION_REGISTRATION_COMPLETE:

                    /*
                     *
                     *  redirect to 'like' page
                     *
                     */

                    if (Config.instance.applicationType == APPLICATION_TYPE_REGISTRATION) {

                        this.navigator.pushView(Thankyou, {urn: barcode});
                    } else {
                        this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_LIKE_APP));
                        //this.navigator.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
                    }

                    break;

                case ViewEvent.LOCATION_NON_FACEBOOK_REGISTERED:

                    this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME));

                    break;


                case ViewEvent.LOCATION_FACEBOOK_FORCELOGOUT:
                    this.navigator.pushView(FaceBookLogoutOverride, {urn: barcode});

                    break;

                case ViewEvent.LOCATION_LIKE_APP:
                    this.navigator.pushView(LikeApp);
                    break;

                case ViewEvent.LOCATION_GAME:

                    trace("****** into the game" + Config.instance.applicationType + " type: " + APPLICATION_TYPE_PHOTO);


                    this.navigator.pushView(CameraCapture, {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});

                    break;
                case ViewEvent.LOCATION_GAME_COMPLETE:
                    this.navigator.pushView(Thankyou);

                    break;
                default:

            }


        }

        protected function error(e:KioskError = null):void {

            showError(e.message, e.title, e.exitFunction);
        }

        protected function modal(e:KioskError = null):void {

            showModal(e.message, e.title, e.exitFunction, e.retryFunction);
        }

        protected function toggleConnectIcon(e:TimerEvent):void {
            if (connStatus.visible) {
                connStatus.visible = false;
            } else if (!cleverUrlMonitor.available) {
                connStatus.visible = true;
            }
        }

        protected function notifyIdle(e:Event):void {
            //defaultState();
            defaultView();

        }

        protected function announceStatus(e:StatusEvent):void {

            var gino:UserObjectEvent;
            gino = new UserObjectEvent(UserObjectEvent.STATUS_CHANGE, cleverUrlMonitor.available);
            this.navigator.dispatchEvent(gino);
        }

        protected function checkInternet(e:Event):void {
            var gino:MonitorConnection = e as MonitorConnection;

        }

        protected function notifyNoInternet(e:Event):void {

            //defaultState();
            defaultView();
            cleverUrlMonitor.removeEventListener(MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
            cleverUrlMonitor.addEventListener(MonitorConnection.EVENT_INTERNET_AVAILABLE, notifyInternet);
            showError("SORRY - NO INTERNET CONNECTION", "CONNECTION ERROR");

        }

        protected function notifyInternet(e:Event):void {
            trace("notify internet")
            //var gino:UserObjectEvent= new UserObjectEvent(UserObjectEvent.ONLINE);
            //this.navigator.dispatchEvent(gino);

            cleverUrlMonitor.addEventListener(MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
            cleverUrlMonitor.removeEventListener(MonitorConnection.EVENT_INTERNET_AVAILABLE, notifyInternet);


            if (alertbox != null) {
                if (alertbox.windowTitle == "CONNECTION ERROR") {
                    PopUpManager.removePopUp(alertbox);
                    /*
                     if (currentState == "Scan")
                     {
                     if (highscore!=null)
                     {
                     highscore.init();
                     }
                     }
                     */
                }
            }

        }

        protected function showError(msg:String = "", title:String = "", exitFunction:Function = null):void {
            //Alert.show(msg, title, 4, null, exitFunction);

            clearPopups();
            alertbox = new ErrorAlert();
            alertbox.message = msg;
            alertbox.windowTitle = title;
            alertbox.exitFunction = exitFunction;
            PopUpManager.addPopUp(alertbox, this, false);
            PopUpManager.centerPopUp(alertbox);
        }

        protected function showModal(msg:String = "", title:String = "", exitFunction:Function = null, retryFunction:Function = null):void {
            //Alert.show(msg, title, 4, null, exitFunction);

            clearPopups();
            modalbox = new ModalAlert();
            modalbox.message = msg;
            modalbox.windowTitle = title;
            modalbox.exitFunction = exitFunction;
            modalbox.retryFunction = retryFunction;

            PopUpManager.addPopUp(modalbox, this, false);
            PopUpManager.centerPopUp(modalbox);

        }

        protected function defaultView(e:Event = null):void {

            this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_RESTART));

        }

        protected function config(event:MouseEvent = null):void {
            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_CONFIG));
        }

        protected function exit(event:MouseEvent = null):void {
            Uploader.instance.close();
            //NativeApplication.nativeApplication.exit();
        }

        protected function setBarCode(e:UserEvent):void {
            barcode = e.urn;

        }

        protected function setScore(e:UserEvent):void {
            score = e.score;
        }

        protected function setIsRegistered(e:UserEvent):void {
            this.isRegistered = (e.userType)


        }

        public function get isFacebookRegistered():Boolean {
            return this.isRegistered == "facebook";
        }

        public function get isStandardRegistered():Boolean {
            return this.isRegistered == "classic";
        }

        public function get activityTitle():String {
            switch (Config.instance.applicationType) {
                case APPLICATION_TYPE_PITSTOP:
                    return "Pit Stop Challenge";
                    break;
                case APPLICATION_TYPE_SIMULATOR:
                    return "Simulator";
                    break;
                case APPLICATION_TYPE_RACECAR:
                    return "Race the racecar";
                    break;
                case APPLICATION_TYPE_WATERPOOL:
                    return "Virtual waterpool";
                    break;
                case APPLICATION_TYPE_COOKING:
                    return "Gastro cooking";
                    break;
                case APPLICATION_TYPE_DJ:
                    return "Dj course";
                    break;
                case APPLICATION_TYPE_HELMET:
                    return "Bungee Run";
                    break;

                default:
                    return "";
            }
        }

        protected function get ApplicationTypeNumber():int {
            switch (Config.instance.applicationType) {
                case APPLICATION_TYPE_PITSTOP:
                    return 2;
                    break;
                case APPLICATION_TYPE_SIMULATOR:
                    return 1;
                    break;
                case APPLICATION_TYPE_PHOTO:
                    return 3;
                    break;
                case APPLICATION_TYPE_HELMET:
                    return 0;
                    break;
                case APPLICATION_TYPE_GREENSCREEN:
                    return 4;
                    break;
                case APPLICATION_TYPE_RACECAR:
                    return 5;
                    break;
                case APPLICATION_TYPE_WATERPOOL:
                    return 6;
                    break;
                case APPLICATION_TYPE_COOKING:
                    return 7;
                    break;
                case APPLICATION_TYPE_DJ:
                    return 8;
                    break;
                default:
                    return -1;
            }
        }


        protected function setMarketingOptin(e:UserEvent):void {
            optin_marketing = e.optin_marketing
        }

        protected function setTermsOptin(e:UserEvent):void {
            optin_terms = e.optin_terms
        }

        protected function takephoto_clickHandler(event:MouseEvent):void {
            if (CameraUI.isSupported) {

                var myCam:CameraUI = new CameraUI();
                myCam.launch(MediaType.IMAGE);
                //myCam.addEventListener(MediaEvent.COMPLETE,takePhotoCompleteHandler);

            }
            else {


                this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, "CAMERA NOT SUPPORTED", "DEVICE ERROR"));

            }

        }

        private function onDeactivate(event:Event):void {
            trace("on deactivate app");
        }

        private function uploaderErrorHandler(event:UploaderErrorEvent):void {
            trace("*********** upload error handler");
            this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.details, event.message));

        }
        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<fx:Style source="assets/css/Fonts.css" />
	<fx:Style source="assets/css/Main.css" />
	
	
	
	<s:navigationContent>		
		<s:HGroup verticalAlign="middle">
			<s:Button id="takephoto" icon="assets/images/core/camera_icon.png" click="takephoto_clickHandler(event)" color="0xFFFFFF" />
			<s:Label text="SUNGLASS HUT PHOTO UPLOADER" color="0xFFFFFF" fontSize="24" fontFamily="Font Bd" paddingLeft="10" paddingTop="10" />
		</s:HGroup>
	</s:navigationContent>
	<s:actionContent>
		<s:HGroup verticalAlign="middle">
			
			
			<s:Button icon="assets/images/core/nm-no-connection.gif" id="connStatus" label="NO CONNECTION" color="0xFFFFFF" visible="false" />
			<s:Button label="Quit" click="exit(event)"  color="0xFFFFFF" />
			<s:Button label="Config" fontFamily="Font Bd" click="config(event)" color="0xFFFFFF" />
			
			<s:Button icon="assets/images/core/home.png" click="{defaultView()}"/>
		</s:HGroup>
		
	</s:actionContent>
	
</s:ViewNavigatorApplication>
