<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        creationComplete="creationCompleteHandler(event)" removing="removingHandler(event)">

    <fx:Script>
		<![CDATA[
        import mx.events.FlexEvent;

        import spark.events.ViewNavigatorEvent;

        import com.distriqt.extension.facebookapi.FacebookAPI;
        import com.distriqt.extension.facebookapi.events.FacebookAPIEvent;
        import com.distriqt.extension.facebookapi.events.FacebookAppRequestEvent;
        import com.distriqt.extension.facebookapi.events.FacebookOpenGraphActionEvent;
        import com.distriqt.extension.facebookapi.objects.FacebookAppRequestInfo;
        import com.distriqt.extension.facebookapi.objects.FacebookDialogType;
        import com.distriqt.extension.facebookapi.objects.FacebookShareParams;

        import flash.display.Sprite;
        import flash.display.StageAlign;
        import flash.display.StageScaleMode;
        import flash.events.Event;
        import flash.events.MouseEvent;
        import flash.text.TextField;
        import flash.text.TextFormat;
        import flash.text.TextFormatAlign;
        import flash.utils.setTimeout;

        public static const DEV_KEY:String = "aae5a5bb826512c6c98103029a639e33512e78e3ujlHJUnnwfoiVYl3ylYKxNFG3qXQF5AZ963nGr37YMufzoCalX/yDOCk6EkHS16IZxkIMKwnlas5Z7n9xJPfaM4S9jz0Z9UuCSV7rnpS7g+4MtPVJx4D1RknOdTbrft1x0q6IUoOOZ7ltmTojiD98oa3uWKZL5d398cN5ZZRcTdA2OVKzdvnQ3Xgf1yeJ2DC4gNZNGRHE2MsRsaq2QqkSPEEEQDhtoU3/6QuVF0ZoGbuju1dxKUQJxnPyOF8AFDy+0b6ZykZTCIM2bvxoEnldLTbFkQfDpXQQJIZV28B733Y0gF4IWWWtMPXzOR2Fitn7FAvCUPITorA5efs+pOH3A==";

        private var _buttons:Array;
        private var _text:TextField;
        private var _dialogType:String = FacebookDialogType.NATIVE;

        private function creationCompleteHandler(event:FlexEvent):void {


            init();
        }



        private function init():void {
            try {
                FacebookAPI.init(DEV_KEY);

                message("FacebookAPI Supported: " + String(FacebookAPI.isSupported));
                message("FacebookAPI Version: " + FacebookAPI.service.version);

                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_OPENED, session_openedHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_CLOSED, session_closedHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_OPEN_DISABLED, session_openDisabledHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_OPEN_ERROR, session_openErrorHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.GET_PERMISSIONS_COMPLETED, permissionsResultHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.APP_INVOKED, appInvokedHandler);
                FacebookAPI.service.addEventListener(FacebookAppRequestEvent.APP_REQUESTS_FOUND, appRequestsFoundHandler);
                FacebookAPI.service.addEventListener(FacebookAppRequestEvent.APP_REQUEST_DATA_LOADED, appRequestsDataHandler);
                FacebookAPI.service.addEventListener(FacebookOpenGraphActionEvent.ACTION_IDS_FOUND, actionIdsFoundHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.DIALOG_COMPLETED, dialog_completedHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.DIALOG_CANCELLED, dialog_completedHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.DIALOG_ERROR, dialog_completedHandler);


            }
            catch (e:Error) {
                message("ERROR!");
            }
        }

        //
        //	EVENT HANDLERS
        //

        private function stage_resizeHandler(event:Event):void {
            _text.width = stage.stageWidth;
            _text.height = stage.stageHeight * 0.5;

        }



        private function dialogResultHandler(data:Object, error:String):void {
            if (data) {
                trace("Dialog completed");
            }
            else {
                trace("Dialog error: " + error);
            }
        }

        private function permissionsResultHandler(event:FacebookAPIEvent):void {
            trace("Loaded permissions: " + event.data.permissions.join(","));
        }


        private function session_openedHandler(event:FacebookAPIEvent):void {
            trace("Session Opened!");
            if (event.data) {
                trace("> " + event.data.accessToken);
                trace("> " + event.data.userId);
                trace("> " + event.data.userName);
                trace("> " + event.data.firstName);
                trace("> " + event.data.lastName);
                trace("> " + event.data.expiry);
            }
        }

        private function session_closedHandler(event:FacebookAPIEvent):void {
            trace("Session Closed!");
        }

        private function session_openDisabledHandler(event:FacebookAPIEvent):void {
            trace("Session Open failed - application is disabled!");
        }

        private function session_openErrorHandler(event:FacebookAPIEvent):void {
            trace("Session Open error - " + event.error);
        }

        private function appRequestsFoundHandler(event:FacebookAppRequestEvent):void {
            trace("Found app requests: " + event.requestIds.join(", "));
        }

        private function appRequestsDataHandler(event:FacebookAppRequestEvent):void {
            trace("Found app request data!");
            for each (var r:FacebookAppRequestInfo in event.requests) {
                trace("R id: " + r.requestId);
                trace("From: " + r.fromUserName);
                trace("Data: " + r.data);
            }
        }

        private function dialog_completedHandler(event:FacebookAPIEvent):void {
            // Dialog completed
        }

        private function dialog_cancelledHandler(event:FacebookAPIEvent):void {
            // The user cancelled the dialog
        }

        private function dialog_errorHandler(event:FacebookAPIEvent):void {
            // An error occurred
            trace(" Dialog error: " + event.error);
        }

        private function actionIdsFoundHandler(event:FacebookOpenGraphActionEvent):void {
            trace("Action IDs: " + event.actionIds.join(","));
        }

        private function appInvokedHandler(event:FacebookAPIEvent):void {
            message("App invoked: " + event.data.targetUrl + ", " + event.data.sourceApplication);
        }

        private function message(str:String):void {
            trace(str);
            theOutput.appendText(str + "\n");
        }





        private function removingHandler(event:ViewNavigatorEvent):void {

        }

        private function button_clickHandler(event:MouseEvent):void {
            trace(event.target.id);
            if (!FacebookAPI.isSupported) {
                message("Facebook API not supported on this platform!");
                return;
            }

            switch (event.target.id) {

                // Init Facebook and create session
                case "button0":
                    message("Initialising FacebookAPI...\n");
                    FacebookAPI.service.initialiseApp("606919926007758");
                    break;

                // Log in
                case "button1":
                    FacebookAPI.service.createSession([ "basic_info","publish_actions" ], true, true);
                    break;

                // Check session
                case "button2":
                    //message("Session open: " + FacebookAPI.service.isSessionOpen().toString());
                    message("Token: " + FacebookAPI.service.getAccessToken());
                    break;

                // Request publish permissions
                case "button3":
                    FacebookAPI.service.requestPermissions([ "publish_actions" ], false);
                    break;

                // Load the current permissions for the user
                case "button4":
                    FacebookAPI.service.getCurrentPermissions();
                    break;

                // Share dialog to share a link
                case "button5":
                    var params:FacebookShareParams = new FacebookShareParams();
                    params.title = "This is the title";
                    params.caption = "This is the caption";
                    params.description = "This is the description";
                    //params.link = "http://bolleloz.herokuapp.com/test";
                    FacebookAPI.service.openShareDialog(params, dialogResultHandler);
                    break;

                // Change the preferred dialog type
                case "button6":

                    switch (_dialogType) {
                        case FacebookDialogType.NATIVE:
                            _dialogType = FacebookDialogType.OS_INTEGRATED;
                            break;

                        case FacebookDialogType.OS_INTEGRATED:
                            _dialogType = FacebookDialogType.WEB;
                            break;

                        case FacebookDialogType.WEB:
                            _dialogType = FacebookDialogType.NATIVE;
                            break;

                    }

                    trace("Preferred dialog type: " + _dialogType);
                    FacebookAPI.service.setPreferredDialogType(_dialogType);
                    break;

                // Logout
                case "button7":
                    FacebookAPI.service.closeSession(true);
                    break;

            }

        }
        ]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
    <s:SpriteVisualElement id="cont" alpha="0" />
    <s:HGroup>
        <s:VGroup>
            <s:Button id="button0" label="Init Facebook" click="button_clickHandler(event)" />
            <s:Button id="button1" label="Open Session" click="button_clickHandler(event)" />
            <s:Button id="button2" label="Session Check" click="button_clickHandler(event)" />
            <s:Button id="button3" label="Request Perms" click="button_clickHandler(event)" />
            <s:Button id="button4" label="Get Perms" click="button_clickHandler(event)" />
            <s:Button id="button5" label="Share Dialog" click="button_clickHandler(event)" />
            <s:Button id="button6" label="Change Dlg Type" click="button_clickHandler(event)" />
            <s:Button id="button7" label="Logout" click="button_clickHandler(event)" />
        </s:VGroup>
        <s:TextArea width="100%" height="100%" id="theOutput" />
    </s:HGroup>


</s:View>
