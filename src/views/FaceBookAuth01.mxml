<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        creationComplete="creationCompleteHandler(event)" removing="removingHandler(event)">

    <fx:Script>
		<![CDATA[
        import com.alfo.UserObject;
        import com.alfo.res.Resource;
        import com.distriqt.extension.facebookapi.FacebookAPI;
        import com.distriqt.extension.facebookapi.events.FacebookAPIEvent;
        import com.distriqt.extension.facebookapi.events.FacebookAppRequestEvent;
        import com.distriqt.extension.facebookapi.events.FacebookOpenGraphActionEvent;
        import com.distriqt.extension.facebookapi.objects.FacebookAppRequestInfo;
        import com.distriqt.extension.facebookapi.objects.FacebookDialogType;
        import com.distriqt.extension.facebookapi.objects.FacebookShareParams;

        import events.KioskError;
        import events.ViewEvent;

        import model.Config;

        import mx.events.FlexEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import spark.events.ViewNavigatorEvent;

        public static const DEV_KEY:String = "aae5a5bb826512c6c98103029a639e33512e78e3ujlHJUnnwfoiVYl3ylYKxNFG3qXQF5AZ963nGr37YMufzoCalX/yDOCk6EkHS16IZxkIMKwnlas5Z7n9xJPfaM4S9jz0Z9UuCSV7rnpS7g+4MtPVJx4D1RknOdTbrft1x0q6IUoOOZ7ltmTojiD98oa3uWKZL5d398cN5ZZRcTdA2OVKzdvnQ3Xgf1yeJ2DC4gNZNGRHE2MsRsaq2QqkSPEEEQDhtoU3/6QuVF0ZoGbuju1dxKUQJxnPyOF8AFDy+0b6ZykZTCIM2bvxoEnldLTbFkQfDpXQQJIZV28B733Y0gF4IWWWtMPXzOR2Fitn7FAvCUPITorA5efs+pOH3A==";

        private var _dialogType:String = FacebookDialogType.NATIVE;

        private static const CREATESESSION:String = "button1";

        private static const INIT:String = "button0";

        private static const CHECKSESSION:String = "button2";

        private static const REQUESTXPERMS:String = "button3";

        private static const GETPERMS:String = "button4";

        private static const SHARE:String = "button5";

        private static const CHANGEDLG:String = "button6";

        private static const LOGOUT:String = "button7";

        private function creationCompleteHandler(event:FlexEvent):void {

            debugStuff.visible=Config.instance.debugMode;
            init();

        }


        private function init():void {
            try {
                FacebookAPI.init(DEV_KEY);

                message("FacebookAPI Supported: " + String(FacebookAPI.isSupported));
                message("FacebookAPI Version: " + FacebookAPI.service.version);

                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_OPENED, session_openedHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_CLOSED, session_closedHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_OPEN_DISABLED, session_openDisabledHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.SESSION_OPEN_ERROR, session_openErrorHandler);
                FacebookAPI.service.addEventListener(FacebookAPIEvent.GET_PERMISSIONS_COMPLETED, permissionsResultHandler);

                //FacebookAPI.service.addEventListener(FacebookAPIEvent.APP_INVOKED, appInvokedHandler);
                // FacebookAPI.service.addEventListener(FacebookAppRequestEvent.APP_REQUESTS_FOUND, appRequestsFoundHandler);
                //FacebookAPI.service.addEventListener(FacebookAppRequestEvent.APP_REQUEST_DATA_LOADED, appRequestsDataHandler);
                //FacebookAPI.service.addEventListener(FacebookOpenGraphActionEvent.ACTION_IDS_FOUND, actionIdsFoundHandler);
                //FacebookAPI.service.addEventListener(FacebookAPIEvent.DIALOG_COMPLETED, dialog_completedHandler);
                //FacebookAPI.service.addEventListener(FacebookAPIEvent.DIALOG_CANCELLED, dialog_completedHandler);
                //FacebookAPI.service.addEventListener(FacebookAPIEvent.DIALOG_ERROR, dialog_completedHandler);
                // handling the request of extra permissions
                //FacebookAPI.service.addEventListener(FacebookAPIEvent.REQUEST_PERMISSIONS_COMPLETED, facebookapi_permissions_request_completedHandler);
                //FacebookAPI.service.addEventListener(FacebookAPIEvent.REQUEST_PERMISSIONS_CANCELLED, facebookapi_permissions_request_cancelledHandler);
                //FacebookAPI.service.addEventListener(FacebookAPIEvent.REQUEST_PERMISSIONS_ERROR, facebookapi_permissions_request_errorHandler);


            }
            catch (e:Error) {
                this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, e.message, "INIT API ERROR"));
            }
            try {
                FacebookAPI.service.initialiseApp("606919926007758");
            } catch (e:Error) {
                this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, e.message, "INIT APP ERROR"));
            }
            setTimeout(function () {
                trace("callFBApi CreateSession")
                FacebookAPI.service.createSession([ "basic_info", "email", "publish_actions" ], false, false);
            }, 3000);


        }

        //
        //	EVENT HANDLERS
        //


        private function dialogResultHandler(data:Object, error:String):void {
            if (data) {
                trace("Dialog completed");
            }
            else {
                trace("Dialog error: " + error);
            }
        }

        private function permissionsResultHandler(event:FacebookAPIEvent):void {
            trace("Loaded permissions: " + event.data.permissions.join(","));
        }


        private function session_openedHandler(event:FacebookAPIEvent):void {
            trace("Session Opened!");
            if (event.data) {
                trace("> " + event.data.accessToken);
                trace("> " + event.data.userId);
                trace("> " + event.data.userName);
                trace("> " + event.data.firstName);
                trace("> " + event.data.lastName);
                trace("> " + event.data.expiry);
            }
            // TODO add extra fields usedID username etc.
            if (event.rawData) {
                var userInfo:Object = JSON.parse(event.rawData.toString());
                UserObject.instance.firstname = userInfo.result.firstName;
                UserObject.instance.lastname = userInfo.result.lastName;
                UserObject.instance.email = userInfo.result.email;
                UserObject.instance.token = userInfo.result.accessToken;
                UserObject.instance.facebook = true;
            }
            trace("userobject updated:" + UserObject.instance.firstname);
            FacebookAPI.service.closeSession(true);
            //
            var passVars:Object = new Object();
            passVars.token = userInfo.result.accessToken;
            regenerateTokenHTTPService.send(passVars);
        }

        private function session_closedHandler(event:FacebookAPIEvent):void {
            trace("Session Closed!");
            //this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_FACEBOOK_REGISTERED));
        }

        private function session_openDisabledHandler(event:FacebookAPIEvent):void {
            this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.error, "Session Open failed"));
            trace("Session Open failed - application is disabled!");
        }

        private function session_openErrorHandler(event:FacebookAPIEvent):void {
            trace("Session Open error - " + event.error);
            this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.error, "Session Open error"));
        }

        private function appRequestsFoundHandler(event:FacebookAppRequestEvent):void {
            trace("Found app requests: " + event.requestIds.join(", "));
        }

        private function appRequestsDataHandler(event:FacebookAppRequestEvent):void {
            trace("Found app request data!");
            for each (var r:FacebookAppRequestInfo in event.requests) {
                trace("R id: " + r.requestId);
                trace("From: " + r.fromUserName);
                trace("Data: " + r.data);
            }
        }

        private function dialog_completedHandler(event:FacebookAPIEvent):void {
            trace("dialog complete:" + event.data);
        }

        private function dialog_cancelledHandler(event:FacebookAPIEvent):void {
            trace("dialog cancel:" + event.data);
        }

        private function dialog_errorHandler(event:FacebookAPIEvent):void {
            // An error occurred
            trace(" Dialog error: " + event.error);
        }

        private function actionIdsFoundHandler(event:FacebookOpenGraphActionEvent):void {
            trace("Action IDs: " + event.actionIds.join(","));
        }

        private function appInvokedHandler(event:FacebookAPIEvent):void {
            message("App invoked: " + event.data.targetUrl + ", " + event.data.sourceApplication);
        }

        private function message(str:String):void {
            trace(str);
            theOutput.appendText(str + "\n");
        }


        private function removingHandler(event:ViewNavigatorEvent):void {
            // removing event handlers
            trace("******** facebookauth exit");
            FacebookAPI.service.removeEventListener(FacebookAPIEvent.SESSION_OPENED, session_openedHandler);
            FacebookAPI.service.removeEventListener(FacebookAPIEvent.SESSION_CLOSED, session_closedHandler);
            FacebookAPI.service.removeEventListener(FacebookAPIEvent.SESSION_OPEN_DISABLED, session_openDisabledHandler);
            FacebookAPI.service.removeEventListener(FacebookAPIEvent.SESSION_OPEN_ERROR, session_openErrorHandler);
            FacebookAPI.service.removeEventListener(FacebookAPIEvent.GET_PERMISSIONS_COMPLETED, permissionsResultHandler);

        }


        private function callFBAPI(command:String):void {

            if (!FacebookAPI.isSupported) {
                message("Facebook API not supported on this platform!");
                return;
            }

            switch (command) {

                // Init Facebook and create session
                case INIT:
                    message("Initialising FacebookAPI...\n");
                    FacebookAPI.service.initialiseApp("606919926007758");
                    break;

                // Log in
                case CREATESESSION:
                    FacebookAPI.service.createSession([ "basic_info", "email", "publish_actions" ], false, false);
                    break;

                // Check session
                case CHECKSESSION:
                    //message("Session open: " + FacebookAPI.service.isSessionOpen().toString());
                    message("Token: " + FacebookAPI.service.getAccessToken());
                    break;

                // Request publish permissions
                case REQUESTXPERMS:
                    trace("requesting extra perms");
                    FacebookAPI.service.requestPermissions([ "publish_actions", "upload_photos" ], false);
                    FacebookAPI.service.flushAppEvents();
                    break;

                // Load the current permissions for the user
                case GETPERMS:
                    FacebookAPI.service.getCurrentPermissions();
                    break;

                // Share dialog to share a link
                case SHARE:
                    var params:FacebookShareParams = new FacebookShareParams();
                    params.title = "This is the title";
                    params.caption = "This is the caption";
                    params.description = "This is the description";
                    //params.image=new BitmapData(400,400,false,0xcc0000);
                    params.link = "http://bolleloz.herokuapp.com/test";
                    FacebookAPI.service.openShareDialog(params, dialogResultHandler);
                    break;

                // Change the preferred dialog type
                case CHANGEDLG:

                    switch (_dialogType) {
                        case FacebookDialogType.NATIVE:
                            _dialogType = FacebookDialogType.OS_INTEGRATED;
                            break;

                        case FacebookDialogType.OS_INTEGRATED:
                            _dialogType = FacebookDialogType.WEB;
                            break;

                        case FacebookDialogType.WEB:
                            _dialogType = FacebookDialogType.NATIVE;
                            break;

                    }

                    trace("Preferred dialog type: " + _dialogType);
                    FacebookAPI.service.setPreferredDialogType(_dialogType);
                    break;

                // Logout
                case LOGOUT:
                    FacebookAPI.service.closeSession(true);
                    break;

            }

        }

        private function facebookapi_permissions_request_completedHandler(event:FacebookAPIEvent):void {
            trace("extra permissions obtained");
        }

        private function facebookapi_permissions_request_cancelledHandler(event:FacebookAPIEvent):void {
            trace("request extra permissions canceled");
        }

        private function facebookapi_permissions_request_errorHandler(event:FacebookAPIEvent):void {
            trace("request extra permissions canceled");
        }

        private function regenerateTokenHTTPService_resultHandler(event:ResultEvent):void {
            if (event.result.facebook_response == "ok") {
                UserObject.instance.token = event.result.token;
                this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME));
            } else {
                this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.result.message.toString(), "REGENERATE TOKEN ERROR"));
            }
            trace("token result");
        }

        private function regenerateTokenHTTPService_faultHandler(event:FaultEvent):void {
            this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.message.toString(), "REGENERATE TOKEN ERROR"));

        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <s:HTTPService id="regenerateTokenHTTPService" resultFormat="flashvars" method="POST"
                       url="http://sunglasshut.wassermanexperience.com/storetoken.php"
                       result="regenerateTokenHTTPService_resultHandler(event)"
                       fault="regenerateTokenHTTPService_faultHandler(event)"/>
    </fx:Declarations>

    <s:BorderContainer width="100%" height="100%" borderVisible="false" backgroundColor="0x000000">
        <s:BitmapImage width="100%" height="100%" smooth="true" smoothingQuality="high" source="{Resource.BACKGROUND}"
                       id="backgroundImg"/>
        <s:HGroup id="debugStuff" visible="{Config.instance.debugMode}}">
            <s:VGroup>
                <s:Button label="INIT" click="callFBAPI(INIT)"/>
                <s:Button label="CREATE" click="callFBAPI(CREATESESSION)"/>
                <s:Button label="CHECK" click="callFBAPI(CHECKSESSION)"/>
                <s:Button label="GET PERMS" click="callFBAPI(GETPERMS)"/>
                <s:Button label="REQUEST" click="callFBAPI(REQUESTXPERMS)"/>
                <s:Button label="SHARE" click="callFBAPI(SHARE)"/>
                <s:Button label="CHANGEDIALOG" click="callFBAPI(CHANGEDLG)"/>
                <s:Button label="SHARE" click="callFBAPI(SHARE)"/>
                <s:Button label="LOGOUT" click="callFBAPI(LOGOUT)"/>
            </s:VGroup>
            <s:TextArea width="50%" height="50%" id="theOutput"/>
        </s:HGroup>
    </s:BorderContainer>

</s:View>
