<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark" title=""
        creationComplete="onCreationCompleteHandler(event)" backgroundColor="0x000000" addedToStage=""
        remove="view1_removeHandler(event)">
    <fx:Script>
		<![CDATA[
        import com.alfo.UserObject;
        import com.alfo.utils.StringUtils;
        import com.alfo.utils.Uploader;
        import com.alfo.utils.UploaderEvent;

        import events.KioskError;
        import events.ViewEvent;

        import model.Config;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        private var file:File;


        [Bindable]
        private var uploadDP:ArrayCollection = new ArrayCollection();

        protected function onCreationCompleteHandler(event:FlexEvent):void {

            Uploader.instance.addEventListener(UploaderEvent.UPDATE, updateRecordCountHandler);
            Uploader.instance.countRecords();
            //var statement:SQLStatement = SQLConnectionWrapper.instance.getAllRecords();
            //statement.execute(-1, new Responder(handleRecordCount, handleFailure));
            trace("debug mode:" + Config.instance.debugMode);
            debugCheck.selected = Config.instance.debugMode;
            this.localserver.text = Config.instance.localIP;
            this.server.text = Config.instance.serverIP;
            this.facebookAPI_ID.text = Config.instance.facebookAppID;


        }

        private function handleRecordCount(result:SQLResult):void {


        }

        private function handleFailure(error:SQLError):void {
            trace("Epic Fail from ApplicationType: " + error.message);
        }


        protected function submit(e:MouseEvent):void {

            Config.instance.localIP = this.localserver.text;
            Config.instance.serverIP = this.server.text;
            Config.instance.facebookAppID = this.facebookAPI_ID.text;

            Config.instance.writeXMLData();

            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_RESTART));

        }

        protected function cancel(e:MouseEvent):void {
            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_RESTART));
        }

        protected function forceLogout(e:MouseEvent):void {
            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_FACEBOOK_FORCELOGOUT));
        }

        protected function forcePrint_clickHandler(event:MouseEvent):void {
            file = File.applicationDirectory.resolvePath("assets/images/blankshot.jpg");
            if (file.exists) {
                trace("file exists!");
                var destFile:File = File.documentsDirectory.resolvePath(UserObject.instance.tempPath + File.separator + "blank_" + StringUtils.generateRandomString(4) + ".jpg");
                try {
                    file.copyTo(destFile, true);
                } catch (e:Error) {
                    trace("******** error saving file" + e.message);
                    this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, e.message, "I/O error, check SD Card available space"));
                } finally {
                    trace("file copied");
                }
            } else {
                trace("****** blank file does not exists");
            }
            // TODO send to printer with new method Uploader
        }

        private function handleLocalError(e:IOErrorEvent):void {
            this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, "The local server appears to be offline. Please check the laptop and the wireless connection", "ERROR SENDING TO PRINTER"));
        }

        private function onCompleteLocal(e:Event):void {
            trace("photo uoloded locally");
        }

        protected function view1_removeHandler(event:FlexEvent):void {

            Uploader.instance.removeEventListener(UploaderEvent.UPDATE, updateRecordCountHandler);
        }

        private function updateRecordCountHandler(event:UploaderEvent):void {
            trace("******* applicationType: updated record count")
            var data:Array = event.result.data;
            uploadDP = new ArrayCollection(data);
            trace("got all the records from ApplicationType");

        }

        private function debugCheck_clickHandler(event:MouseEvent):void {
            Config.instance.debugMode = debugCheck.selected;
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
        <s:RadioButtonGroup id="radioGroup"/>

    </fx:Declarations>


    <s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">


        <s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
            <s:Form id="configform" horizontalCenter="0" verticalCenter="0" backgroundColor="0x000000">
                <s:layout>
                    <s:FormLayout/>
                </s:layout>
                <s:FormHeading label="CONFIGURATION DETAILS:"/>

                <s:FormItem width="365" label="Server name:" fontFamily="Arial">
                    <s:TextInput id="server" width="500" color="0x000000" fontFamily="Arial"/>
                </s:FormItem>
                <s:FormItem width="365" label="Local server:" fontFamily="Arial">
                    <s:TextInput id="localserver" width="500" color="0x000000" fontFamily="Arial"/>
                </s:FormItem>

                <s:HGroup>


                </s:HGroup>

                <s:FormItem width="365" label="Facebook appID:">
                    <s:TextInput id="facebookAPI_ID" width="400" color="0x000000" softKeyboardType="number"
                                 fontFamily="Arial"/>
                </s:FormItem>
                <s:FormItem label="Debug mode">
                    <s:CheckBox id="debugCheck" click="debugCheck_clickHandler(event)"/>
                </s:FormItem>
                <s:HGroup verticalAlign="middle">
                    <s:Button label="Cancel" click="cancel(event)"/>
                    <s:Spacer width="50"/>
                    <s:Button id="submitButton" label="Submit" click="submit(event)"/>
                    <s:Spacer width="100"/>
                    <s:Button label="Force print" id="forcePrint" click="forcePrint_clickHandler(event)"/>
                </s:HGroup>
            </s:Form>


            <s:DataGrid skinClass="skins.CustomDataGridSkin" height="400" dataProvider="{uploadDP}" width="700"
                        visible="{debugCheck.selected}" includeInLayout="{debugCheck.selected}"/>
        </s:VGroup>

    </s:Scroller>
</s:View>
