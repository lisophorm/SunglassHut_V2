<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" backgroundColor="0x000000"
		creationComplete="onAddToStage(event)" removedFromStage="view1_removedFromStageHandler(event)" skinClass="skins.BarView" currentState="default" xmlns:components="views.components.*"  >
	
	<fx:Script>
		<![CDATA[
			import com.alfo.UserObject;
			import com.alfo.utils.EncryptWrapper;
			import com.alfo.utils.StringUtils;
			
			import mx.core.BitmapAsset;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import utils.JPGEncoder;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import events.KioskError;
			import events.KioskProgressEvent;
			import events.ViewEvent;
			
			import model.Config;
			
			import uk.soulwire.utils.display.Alignment;
			import uk.soulwire.utils.display.DisplayUtils;
			
			import views.components.ProgressPopUp;
			
			private var urlRequest:URLRequest
			private var file:File;
			
			private var currentURN:String;
			
			private var progressPop:ProgressPopUp;
			protected var fileTransfer:Boolean=false;
			
			protected var webView:StageWebView = new StageWebView();
			
			[Bindable]
			public var imgCls:Class;
			
			[Bindable]
			public var userName:String="";
			
			[Bindable]
			public var posts:int = 0;
			
			public var destFile:File;
			
			protected var applicationType:int = 0;
			
			private var logOutView:StageWebView;
			
			// image processing stuff
			private var overlayBitmapData:BitmapData;
			private var backGroundBitmapData:BitmapData;
			
			private var destBitmap:Bitmap;
			
			private var scaledBitmap:Bitmap;
			
			var foregroundLoader:Loader = new Loader();
			var backgroundLoader:Loader = new Loader();
			
			var loaded1:Boolean=false;
			var loaded2:Boolean=false;
			
			var destWidth:Number;
			var destHeight:Number;
			
			private var tempPhotoDisplay:DisplayObject;
			
			public var theUser:UserObject;
			
			private var currentPhoto:Number=1;
			
			private var compositeBitmap:BitmapData;
			private var photoLoader:Loader;
			
			//private var photoBitmaps:Vector.<BitmapData>=new Vector.<BitmapData>(3); 
			
			private var photoBitmaps:Vector.<BitmapData> = new Vector.<BitmapData>(3); 
			
			private var completedPhotos:Vector.<Boolean> = new <Boolean>[false,false,false]; 
			
			private var theBitmapAsset:BitmapAsset;
			
			[Embed(source="assets/images/nophoto.jpg")]
			private var embeddedNoPhoto : Class;
			
			private var sizeDefined:Boolean=false;
			private var squareDims:Rectangle=new Rectangle(0,0,0,0);
			
			var theJPG:JPGEncoder=new JPGEncoder(80);
			
			private var imgByteArray:ByteArray;
			
			function onCompletePhoto (event:Event):void
			{
				
				photoBitmaps[currentPhoto]=DisplayUtils.createThumb( Bitmap(LoaderInfo(event.target).content).bitmapData, 620, 615, Alignment.MIDDLE, true ).bitmapData;
				completedPhotos[currentPhoto]=true;
				//photoBitmaps[0] = Bitmap(LoaderInfo(event.target).content).bitmapData;
				//photo1Preview.bitmapData=photoBitmap.clone();
				trace("photo loaded!!!!");
				theBitmapAsset = new BitmapAsset(photoBitmaps[currentPhoto]);
				
				switch(currentPhoto) {
					case 0:
						photo1Preview.source=theBitmapAsset;
						break;
					case 1:
						photo2Preview.source=theBitmapAsset;
						break;
					case 2:
						photo3Preview.source=theBitmapAsset;
						break;
				}
				complete3Photos();
			}
			
			
			private function complete3Photos() {
				
				
				if(completedPhotos[0] && completedPhotos[1] && completedPhotos[2]) {
					
					previewButton.enabled=true;
					
				}
				
				
				
			}
			

			protected function onAddToStage(event:Event):void
			{
				compositeBitmap=new BitmapData(620,1844,false,0x000000);
				
				theJPG.addEventListener(ProgressEvent.PROGRESS, onEncodingProgress);
				theJPG.addEventListener(Event.COMPLETE, onEncodeComplete);
				
				photoLoader = new Loader();
				photoLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,onCompletePhoto);
				
				theUser=UserObject.getInstance();
				trace("added photo "+theUser.firstname);
				
				trace("ci sto dentro"+data.facebook);

				theUser.destFileName=theUser.urn+"-"+StringUtils.generateRandomString(4)+".jpg";
				trace("new filename: "+theUser.firstname);
				/*
				*
				* This is a new view to quickly logout from whichever view you are on.
				* Only works if access token is available in Config
				*
				*/
				// loads the foreground image to overlay
				foregroundLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
				foregroundLoader.load(new URLRequest("assets/images/overlay.png"));
				
				
				//facebook_specifics.visible =  this.parentApplication.isFacebookRegistered
				if (data!=null)
				{
					currentURN = data.urn;
					applicationType = data.type;
					
					//DATABASE DUPLICATE
					//this.currentState = "facebook";
					this.currentState = data.facebook ? "facebook" : "default";
					
					
					userName = theUser.firstname+" get ready to share";
					
					
					trace("---------------------------------------------------------------------------- getUser_resultHandler: "+userName);
					

					fileTransfer=false;
					
				} else {
					trace("URN MISSING");
				}					
				
			}
			
			protected function onComplete (event:Event):void
			{
				
				overlayBitmapData = Bitmap(LoaderInfo(event.target).content).bitmapData;
				trace("Loaded overlay"+overlayBitmapData.width);
				destBitmap = new Bitmap();
				destBitmap.bitmapData=new BitmapData(overlayBitmapData.width,overlayBitmapData.height,true,0xCC00FFFF);
				
			}
			
			
			
			protected function httpservice_faultHandler(event:FaultEvent):void
			{
				savePhotoLocally();
				//this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.fault.faultString, "NETWORK ERROR, PROCESSING OFFLINE",savePhotoLocally));
				
			}
			
			
			// CAMERA HANDLING
			
			//take a new picture with the camera
			protected function takePhoto(currPhoto:Number):void
			{
				currentPhoto=currPhoto;
				// toggle below for file system instead of camera
				//onLoadFileClick();
				
				if (CameraUI.isSupported)
				{
					trace("camera is supported");
					var myCam:CameraUI = new CameraUI();
					myCam.launch(MediaType.IMAGE);
					myCam.addEventListener(MediaEvent.COMPLETE,takePhotoCompleteHandler);
					
				}
				else
				{
					trace("camera not supported");
					
					this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, "CAMERA NOT SUPPORTED", "DEVICE ERROR"));
					statusText.text = "Camera not supported on this device.";
					
				}
			}
			
			
			
			
			private function onLoadFileClick():void
			{
				//create the FileReference instance
				file = new File();
				//listen for when they select a file
				file.addEventListener(Event.SELECT, takePhotoCompleteHandler);
				
				//listen for when then cancel out of the browse dialog
				//file.addEventListener(Event.CANCEL,onCancel);
				
				//open a native browse dialog that filters for text files
				//file.browse();
			}
			
			
			//when the selection is complete upload it
			protected function takePhotoCompleteHandler(event:MediaEvent = null):void
			{
				photoLoader.load(new URLRequest(event.data.file.url));
				

			}
			

			private function onEncodingProgress(e:ProgressEvent):void 
			{
				jpgprogress.text=Math.round(e.bytesLoaded/e.bytesTotal * 100).toString()+"%";
				trace('ENCODING PROGRESS: ' + Math.round(e.bytesLoaded/e.bytesTotal * 100) + '%');
			}
			protected function onEncodeComplete(e:Event) {
				imgByteArray= theJPG.ImageData;
				
				//theUser.destFileName=theUser.urn+"-"+StringUtils.generateRandomString(4)+".jpg";
				
				destFile = File.documentsDirectory.resolvePath(theUser.spoolerPath+File.separator+theUser.destFileName);
				trace("destFileName "+theUser.destFileName);
				trace("destFile "+destFile.url);
				
				//Use a FileStream to save the bytearray as bytes to the new file
				var fs:FileStream = new FileStream();
				try{
					//open file in write mode
					fs.open(destFile,FileMode.WRITE);
					//write bytes from the byte array
					fs.writeBytes(imgByteArray);
					//close the file
					fs.close();
				}catch(e:Error){
					trace("******** error saving file"+e.message);
					this.navigator.dispatchEvent( new KioskError(KioskError.ERROR, e.message, "I/O error sending to printer, check SD Card available space" ) );
				} finally {
					fs.close();
				}
				
				var moveFile:File = File.documentsDirectory.resolvePath(theUser.tempPath+File.separator+theUser.destFileName);
				try {
					destFile.copyTo(moveFile,true);
				} catch(e:Error){
					trace("******** error saving file"+e.message);
					this.navigator.dispatchEvent( new KioskError(KioskError.ERROR, e.message, "I/O error, check SD Card available space" ) );
				}
				
				destFile=File.documentsDirectory.resolvePath(theUser.tempPath+File.separator+theUser.destFileName);
				
				this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);

				uploadPhoto();
				
			}
			// uploads the photo
			protected function savePhotoLocally(e:Event=null):void {
				trace("save foto locally"+theUser.destFileName);
				
				var moveFile:File = File.documentsDirectory.resolvePath(theUser.batchPath+theUser.destFileName);
				try {
					destFile.copyTo(moveFile,true);
				} catch(e:Error){
					trace("******** error saving file"+e.message);
					this.navigator.dispatchEvent( new KioskError(KioskError.ERROR, e.message, "I/O error, check SD Card available space" ) );
				} 
				var result:String=theUser.saveXML();
				if (result!="OK") {
					this.navigator.dispatchEvent( new KioskError(KioskError.ERROR, result, "I/O error, check SD Card available space" ) );
				} else {
					complete();
				}
			}
			
			protected function uploadPhoto():void {
				urlRequest = new URLRequest(this.parentApplication.baseURL+"uploader.php");
				if(theUser.isBatch || theUser.isConnected==false) {
					savePhotoLocally();
				} else {
					this.currentState = data.facebook ? "facebook" : "default";
					destFile.addEventListener(Event.COMPLETE,uploadCompleteHandler);
					destFile.addEventListener(Event.OPEN,openUploadHandler);
					destFile.addEventListener(ProgressEvent.PROGRESS,updateProgress);
					destFile.addEventListener(IOErrorEvent.IO_ERROR,onFileError);
					destFile.upload(urlRequest);
					fileTransfer=true;				
					
					this.navigator.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.NOTIFY, "Uploading file" ) );
				}
			}
			
			protected function onFileError(error:IOErrorEvent):void
			{
				//this.navigator.dispatchEvent( new KioskError(KioskError.ERROR, error.text.toString(), "Upload error, switching to batch mode",savePhotoLocally ) );
				savePhotoLocally();
			}
			protected function updateProgress(event:ProgressEvent):void
			{
				var perc:Number=Math.round(event.bytesLoaded*100/event.bytesTotal);
				this.navigator.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.UPDATE, String(perc)+"% complete"));
				trace("progress:"+event.bytesLoaded+ "of:"+event.bytesTotal);
			}
			
			protected function uploadCompleteHandler(event:Event):void
			{
				this.navigator.dispatchEvent( new KioskProgressEvent( KioskProgressEvent.UPDATE_COMPLETE ));
				trace("upload complete");
				takePhotoButton.enabled = true;
				statusText.text = "Photo Uploaded";
				var passVars:Object=new Object();
				passVars.urn=currentURN;
				passVars.file=theUser.destFileName;
				//passVars.caption = caption.text;
				

				passVars.facebook_optin= 1;
			
				
				if(data.facebook) {
					passVars.facebook_optin= 1;
					statusText.text = "Publishing on Facebook...";
				} else {
					passVars.facebook_optin= 0;
					statusText.text = "Sending Email...";
				}
				
				passVars.type = this.applicationType;
				
				publishPhoto.send(passVars);
				
				this.navigator.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.NOTIFY, statusText.text));
				
			}
			
			
			
			protected function openUploadHandler(event:Event):void
			{
				trace("uploading");
				statusText.text = "Uploading...";
			}
			
			
			public function basename(path:String):String {
				var index:Number = path.lastIndexOf('/');
				if (index != -1) {
					return path.substr(index + 1);
				}
				return path;
			}
			
			protected function publishPhoto_resultHandler(event:ResultEvent):void
			{
				this.navigator.dispatchEvent( new KioskProgressEvent( KioskProgressEvent.UPDATE_COMPLETE ));
				if(event.result.result!="SUCCESS") 
				{
					this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, event.result.toString(), "ERROR", restart));
				} else 
				{
					// INCREMENT POSTS BY ONE + 
					posts +=1;
					//complete();
					this.currentState="default";
				}
			}
			
			protected function complete():void
			{
				this.navigator.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME_COMPLETE ) );
			}
			
			
			public function restart(e:Event):void
			{
				this.navigator.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ) );
			}
			
			protected function cancelBTN_clickHandler(event:MouseEvent):void
			{
				if(fileTransfer) {
					destFile.removeEventListener(Event.COMPLETE,uploadCompleteHandler);
					destFile.removeEventListener(Event.OPEN,openUploadHandler);
					destFile.removeEventListener(ProgressEvent.PROGRESS,updateProgress);
					destFile.removeEventListener(IOErrorEvent.IO_ERROR,onFileError);
				}
				this.navigator.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function get canPost():Boolean
			{
				// if more than 5 posts deselect the checkbox
				
				//return (int(posts)<5);
				return true;
			}
			
			
			
			protected function view1_removedFromStageHandler(event:Event):void
			{
				if(!theUser.isBatch) {
					if(logOutView!=null) {
						logOutView.dispose();
					}
				}
				
			}
			
			protected function photo1Preview_completeHandler(event:Event):void
			{
				if(sizeDefined==false) {
					trace("********** prima volta che prendo le dimensioni");
					squareDims.width=photo1Preview.width;
					squareDims.height=photo1Preview.width;
					sizeDefined=true;
				} else {
					trace("********* dimensioni gia prese");
				}
				
			}
			
			
			protected function photo1Preview_readyHandler(event:FlexEvent):void
			{
				trace("************ image ready, current width:"+event.target.width);
				if(sizeDefined==true && event.target.width!=(Math.floor(stage.width/3)-50)) {
					event.target.width=(Math.floor(stage.width/3)-50);
					event.target.height=event.target.width;
				}
				trace("************ new width:"+event.target.width);
				
			}
			
			protected function previewButton_clickHandler(event:MouseEvent):void
			{
				var mat:Matrix=new Matrix();
				mat.scale(1,1);
				mat.translate(0,0);
				this.currentState="preview";
				this.stage.setAspectRatio(StageAspectRatio.PORTRAIT);
				compositeBitmap.draw(photoBitmaps[0],mat);
				mat=new Matrix();
				mat.scale(1,1);
				mat.translate(0,615);
				compositeBitmap.draw(photoBitmaps[1],mat);
				mat=new Matrix();
				mat.scale(1,1);
				mat.translate(0,1229);
				compositeBitmap.draw(photoBitmaps[2],mat);
				trace("all photos set!");
				theBitmapAsset=new BitmapAsset(compositeBitmap);
				finalImage.source=theBitmapAsset;
				
				
			}
			
			protected function finalImage_readyHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function shootAgainButn_clickHandler(event:MouseEvent):void
			{
				this.currentState="default";
				this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
				
			}
			
			protected function publishButton_clickHandler(event:MouseEvent):void
			{
				currentState="pleasewait";
				theJPG.encodeAsync(compositeBitmap);
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="publishPhoto" resultFormat="flashvars" method="POST" url="{this.parentApplication.baseURL+'publishphoto.php'}" result="publishPhoto_resultHandler(event)" fault="httpservice_faultHandler(event)" />
	</fx:Declarations>
	<s:states>
		<s:State name="default" />
		<s:State name="preview" />
		<s:State name="facebook" />
		<s:State name="pleasewait" />
	</s:states>
	<s:BorderContainer width="100%" height="100%" borderVisible="false" backgroundColor="0x000000">
		
		<s:VGroup includeIn="pleasewait" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:BusyIndicator horizontalCenter="0" verticalCenter="0" width="100" height="100" rotationInterval="200" symbolColor="#E60000" id="busone" />
			<s:Label text="Processing image please wait.." color="#FFFFFF" />
			<s:Label id="jpgprogress" text="" fontWeight="bold" color="#FFFFFF" />
			
		</s:VGroup>

		<s:VGroup includeIn="preview" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" id="previewContainer">
			<s:BitmapImage id="finalImage" width="100%" height="{previewContainer.height - finalButtonBar.height - 100}" scaleMode="letterbox" ready="finalImage_readyHandler(event)" smoothingQuality="high" smooth="true" />
			<s:HGroup id="finalButtonBar">
				<s:Button label="Publish" id="publishButton" click="publishButton_clickHandler(event)" />
				<s:Button label="Shoot again" id="shootAgainButn" click="shootAgainButn_clickHandler(event)" />
			</s:HGroup>
		</s:VGroup>
		<s:VGroup styleName="Game" horizontalAlign="center" verticalAlign="middle" width="100%" height="592" includeIn="default,facebook">
			<s:VGroup horizontalAlign="center" width="100%" height="100%">
				<s:Label id="statusText" color="#009BD7" />
				<s:HGroup horizontalAlign="center" verticalAlign="middle">
					<s:VGroup width="33%" height="100%" horizontalAlign="center">
						<s:BitmapImage id="photo1Preview" width="100%" height="{photo1Preview.width}" source="assets/images/nophoto.jpg" ready="photo1Preview_readyHandler(event)"    complete="photo1Preview_completeHandler(event)" fillMode="scale" scaleMode="zoom" smooth="true" />
						<s:Button id="takePhotoButton" horizontalCenter="0" label="TAKE PHOTO"  click="takePhoto(0)"/>
					</s:VGroup>
					<s:VGroup width="33%" height="100%" horizontalAlign="center" >
						<s:BitmapImage id="photo2Preview" width="100%" height="{photo1Preview.width}" source="assets/images/nophoto.jpg"  ready="photo1Preview_readyHandler(event)" complete="photo1Preview_completeHandler(event)" scaleMode="zoom" smooth="true" />
						<s:Button  horizontalCenter="0" label="TAKE PHOTO"  click="takePhoto(1)"/>
					</s:VGroup>
					<s:VGroup width="33%" height="100%" horizontalAlign="center">
						<s:BitmapImage id="photo3Preview" width="100%" height="{photo1Preview.width}" source="assets/images/nophoto.jpg"  ready="photo1Preview_readyHandler(event)" complete="photo1Preview_completeHandler(event)" scaleMode="zoom" smooth="true" />
						<s:Button  horizontalCenter="0" label="TAKE PHOTO"  click="takePhoto(2)"/>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
			<s:Button label="Preview Photo" id="previewButton" enabled="false" click="previewButton_clickHandler(event)" />
		</s:VGroup>
		
	</s:BorderContainer>
</s:View>