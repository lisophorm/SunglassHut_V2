<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark" backgroundColor="0x000000"
        creationComplete="onAddToStage(event)" removedFromStage="view1_removedFromStageHandler(event)"
        skinClass="skins.BarView" currentState="default">

    <fx:Script>
		<![CDATA[
        import com.alfo.UserObject;
        import com.alfo.res.Resource;
        import com.alfo.utils.StringUtils;
        import com.alfo.utils.Uploader;

        import events.KioskError;
        import events.KioskProgressEvent;
        import events.ViewEvent;

        import model.Config;

        import mx.core.BitmapAsset;
        import mx.core.DPIClassification;
        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.ResizeEvent;
        import mx.graphics.BitmapScaleMode;

        import ru.inspirit.image.encoder.JPGAsyncEncoder;

        import uk.soulwire.utils.display.Alignment;
        import uk.soulwire.utils.display.DisplayUtils;

        import views.components.ProgressPopUp;

        private var urlRequest:URLRequest
        private var file:File;

        private var currentURN:String;

        private var progressPop:ProgressPopUp;
        protected var fileTransfer:Boolean = false;

        private var photoPublished:Boolean = false;
        private var photoPrinted:Boolean = false;

        protected var webView:StageWebView = new StageWebView();

        [Bindable]
        public var imgCls:Class;

        [Bindable]
        public var userName:String = "";

        [Bindable]
        public var posts:int = 0;

        public var destFile:File;

        protected var applicationType:int = 0;

        private var logOutView:StageWebView;

        // image processing stuff
        private var backgroundBitmapData:BitmapData;

        private var destBitmap:Bitmap;

        private var scaledBitmap:Bitmap;

        private var foregroundLoader:Loader = new Loader();
        private var backgroundLoader:Loader = new Loader();

        private var loaded1:Boolean = false;
        private var loaded2:Boolean = false;

        private var destWidth:Number;
        private var destHeight:Number;

        private var tempPhotoDisplay:DisplayObject;

        private var currentPhoto:Number = 1;

        private var compositeBitmap:BitmapData;
        private var photoLoader:Loader;

        private var previewBitmap:BitmapData;

        //private var photoBitmaps:Vector.<BitmapData>=new Vector.<BitmapData>(3);

        private var photoBitmaps:Vector.<BitmapData> = new Vector.<BitmapData>(3);

        private var completedPhotos:Vector.<Boolean> = new <Boolean>[false, false, false];

        private var theBitmapAsset:BitmapAsset;


        private var sizeDefined:Boolean = false;
        private var squareDims:Rectangle = new Rectangle(0, 0, 0, 0);

        private var theJPG:JPGAsyncEncoder = new JPGAsyncEncoder(85);

        private var iosLoader:Loader;

        private var dpiScale:Number = 1;


        function onCompletePhoto(event:Event):void {

            photoBitmaps[currentPhoto] = DisplayUtils.createThumb(Bitmap(LoaderInfo(event.target).content).bitmapData, 620, 616, Alignment.MIDDLE, true).bitmapData;
            completedPhotos[currentPhoto] = true;
            //photoBitmaps[0] = Bitmap(LoaderInfo(event.target).content).bitmapData;
            //photo1Preview.bitmapData=photoBitmap.clone();
            trace("photo loaded!!!!");
            theBitmapAsset = new BitmapAsset(photoBitmaps[currentPhoto]);

            switch (currentPhoto) {
                case 0:
                    photo1Preview.source = theBitmapAsset;
                    break;
                case 1:
                    photo2Preview.source = theBitmapAsset;
                    break;
                case 2:
                    photo3Preview.source = theBitmapAsset;
                    break;
            }
            complete3Photos();
        }


        private function complete3Photos() {


            if (completedPhotos[0] && completedPhotos[1] && completedPhotos[2]) {

                previewButton.enabled = true;

            }


        }


        protected function onAddToStage(event:Event):void {
            trace("device DPI:" + FlexGlobals.topLevelApplication.runtimeDPI);


            this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGING, onOrientationChanging);
            compositeBitmap = new BitmapData(620, 1844, false, 0x000000);

            theJPG.addEventListener(ProgressEvent.PROGRESS, onEncodingProgress);
            theJPG.addEventListener(Event.COMPLETE, onEncodeComplete);

            photoLoader = new Loader();
            photoLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompletePhoto);


            trace("added photo " + UserObject.instance.firstname);

            // just for fb submission
            setInterval(function () {

                photoBitmaps[0] = photo1Preview.bitmapData.clone();
                photoBitmaps[1] = photo2Preview.bitmapData.clone();
                photoBitmaps[2] = photo3Preview.bitmapData.clone();
                previewButton.enabled=true;
            }, 3000);


            UserObject.instance.destFileName = UserObject.instance.urn + "-" + StringUtils.generateRandomString(4) + ".jpg";
            trace("UserObject firstname: " + UserObject.instance.firstname);


            /*
             *
             * This is a new view to quickly logout from whichever view you are on.
             * Only works if access token is available in Config
             *
             */
            // loads the foreground image to overlay
            foregroundLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
            foregroundLoader.load(new URLRequest("assets/images/background.png"));


            //facebook_specifics.visible =  this.parentApplication.isFacebookRegistered
            if (data != null) {
                currentURN = data.urn;
                applicationType = data.type;

                //DATABASE DUPLICATE
                //this.currentState = "facebook";
                this.currentState = data.facebook ? "facebook" : "default";


                userName = UserObject.instance.firstname + " get ready to share";


                trace("---------------------------------------------------------------------------- getUser_resultHandler: " + userName);


                fileTransfer = false;

            } else {
                trace("URN MISSING");
            }


        }

        protected function onOrientationChanging(e:StageOrientationEvent) {
            trace("************ stage is changing orientation:" + e.afterOrientation);
        }

        protected function onComplete(event:Event):void {

            backgroundBitmapData = Bitmap(LoaderInfo(event.target).content).bitmapData;
            trace("Loaded overlay" + backgroundBitmapData.width);
            destBitmap = new Bitmap();
            destBitmap.bitmapData = new BitmapData(backgroundBitmapData.width, backgroundBitmapData.height, true, 0xCC00FFFF);

        }


        // CAMERA HANDLING

        //take a new picture with the camera
        protected function takePhoto(currPhoto:Number):void {
            currentPhoto = currPhoto;
            // toggle below for file system instead of camera
            //onLoadFileClick();

            if (CameraUI.isSupported) {
                trace("camera is supported");
                var myCam:CameraUI = new CameraUI();
                myCam.launch(MediaType.IMAGE);
                myCam.addEventListener(MediaEvent.COMPLETE, takePhotoCompleteHandler);

            }
            else {
                trace("camera not supported");

                this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, "CAMERA NOT SUPPORTED", "DEVICE ERROR"));
                statusText.text = "Camera not supported on this device.";

            }
        }


        //when the selection is complete upload it
        protected function takePhotoCompleteHandler(event:MediaEvent = null):void {
            trace("photo taken ,now IOS jump")
            var mediaPromise:MediaPromise = event.data;

            if (mediaPromise.file == null) {
                iosLoader = new Loader();
                iosLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompletePhoto);
                iosLoader.loadFilePromise(mediaPromise);
                trace("Loading ios photo");
            } else {
                photoLoader.load(new URLRequest(event.data.file.url));
            }


        }

        private function iosLoaderComplete(event:Event):void {
            var loaderInfo:LoaderInfo = event.target as LoaderInfo;

            if (CameraRoll.supportsAddBitmapData) {


            }
        }

        private function onEncodingProgress(e:ProgressEvent):void {
            jpgprogress.text = Math.round(e.bytesLoaded / e.bytesTotal * 100).toString() + "%";
            trace('ENCODING PROGRESS: ' + Math.round(e.bytesLoaded / e.bytesTotal * 100) + '%');
        }

        protected function onEncodeComplete(e:Event) {


            //UserObject.instance.destFileName=UserObject.instance.urn+"-"+StringUtils.generateRandomString(4)+".jpg";

            var writeSuccess:Boolean = true;

            var fileParts:Array = UserObject.instance.destFileName.split(".");

            UserObject.instance.destFileName = fileParts[0] + "-" + numPhotos.value.toString() + ".jpg";

            destFile = File.documentsDirectory.resolvePath(UserObject.instance.spoolerPath + File.separator + UserObject.instance.destFileName);
            trace("destFileName " + UserObject.instance.destFileName);
            trace("destFile " + destFile.nativePath);

            //Use a FileStream to save the bytearray as bytes to the new file
            var fs:FileStream = new FileStream();
            try {
                //open file in write mode
                fs.open(destFile, FileMode.WRITE);
                //write bytes from the byte array
                fs.writeBytes(theJPG.encodedImageData);
                //close the file
                fs.close();
            } catch (e:Error) {
                writeSuccess = false;
                trace("******** error saving file" + e.message);
                this.navigator.dispatchEvent(new KioskError(KioskError.ERROR, e.message, "I/O error saving file, check device available space"));
            } finally {
                fs.close();
            }
            if (writeSuccess) {
                Uploader.instance.addFile(UserObject.instance.destFileName, UserObject.instance.JSONobject, "http://" + Config.instance.serverIP + "photoboothUpload.php");
                //ftpCopy = new FTPCopy(destFile, this.parentApplication.localURL + "upload.php");/*
                this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
                this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME_COMPLETE));
            }
        }


        protected function updateProgress(event:ProgressEvent):void {
            var perc:Number = Math.round(event.bytesLoaded * 100 / event.bytesTotal);
            this.navigator.dispatchEvent(new KioskProgressEvent(KioskProgressEvent.UPDATE, String(perc) + "% complete"));
            trace("progress:" + event.bytesLoaded + "of:" + event.bytesTotal);
        }


        protected function openUploadHandler(event:Event):void {
            trace("uploading");
            statusText.text = "Uploading...";
        }


        public function basename(path:String):String {
            var index:Number = path.lastIndexOf('/');
            if (index != -1) {
                return path.substr(index + 1);
            }
            return path;
        }


        protected function complete(stringa:* = null):void {
            trace("complete! published:" + photoPublished.toString() + " sent to print:" + photoPrinted.toString());

            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_GAME_COMPLETE));

        }


        public function restart(e:Event):void {
            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_RESTART));
        }

        protected function cancelBTN_clickHandler(event:MouseEvent):void {

            this.navigator.dispatchEvent(new ViewEvent(ViewEvent.LOCATION_RESTART));
        }


        protected function get canPost():Boolean {
            // if more than 5 posts deselect the checkbox

            //return (int(posts)<5);
            return true;
        }


        protected function view1_removedFromStageHandler(event:Event):void {

            if (this.stage.hasEventListener(StageOrientationEvent.ORIENTATION_CHANGING)) {
                this.stage.removeEventListener(StageOrientationEvent.ORIENTATION_CHANGING, onOrientationChanging);
            }


            theJPG.removeEventListener(ProgressEvent.PROGRESS, onEncodingProgress);
            theJPG.removeEventListener(Event.COMPLETE, onEncodeComplete);
            theJPG = null;
            if (theBitmapAsset) {
                if (theBitmapAsset.bitmapData) {
                    theBitmapAsset.bitmapData.dispose();
                }
            }


            theBitmapAsset = null;
            photoBitmaps[0].dispose();
            photoBitmaps[1].dispose();
            photoBitmaps[2].dispose();


            if (logOutView != null) {
                logOutView.dispose();
            }


        }

        protected function photo1Preview_completeHandler(event:Event):void {
            if (sizeDefined == false) {
                trace("********** prima volta che prendo le dimensioni");
                squareDims.width = photo1Preview.width;
                squareDims.height = photo1Preview.width;
                sizeDefined = true;
            } else {
                trace("********* dimensioni gia prese");
            }

        }


        protected function photo1Preview_readyHandler(event:FlexEvent):void {
            if (FlexGlobals.topLevelApplication.runtimeDPI == DPIClassification.DPI_320) {
                dpiScale = 2;
            }
            trace("************ image ready, current width:" + event.target.width + "stage width:0" + stage.width);
            // we divide the size accorting to DPI
            var newWidth:Number = (stage.width / (3 * dpiScale)) - 50;
            event.target.width = newWidth;
            event.target.height = event.target.width;
            trace("************ newWidth:" + newWidth);
            trace("************ new width:" + event.target.width);

        }

        protected function previewButton_clickHandler(event:MouseEvent):void {
            var mat:Matrix = new Matrix();
            mat.translate(0, 0);
            this.currentState = "preview";
            this.stage.setAspectRatio(StageAspectRatio.PORTRAIT);
            backgroundImg.source = Resource.BACKGROUND_PORTRAIT;
            compositeBitmap.draw(photoBitmaps[0], mat);
            mat = new Matrix();
            mat.translate(0, 614);
            compositeBitmap.draw(photoBitmaps[1], mat);
            mat = new Matrix();
            mat.scale(1, 1);
            mat.translate(0, 1228);
            compositeBitmap.draw(photoBitmaps[2], mat);
            trace("all photos set!");
            ///theBitmapAsset=new BitmapAsset(compositeBitmap);
            //finalImage.source=theBitmapAsset;

            previewBitmap = new BitmapData(backgroundBitmapData.width, backgroundBitmapData.height, false);
            previewBitmap.draw(backgroundBitmapData);
            mat = new Matrix();
            mat.translate(68, 65);
            previewBitmap.draw(compositeBitmap, mat);

            theBitmapAsset = new BitmapAsset(previewBitmap);
            finalImage.source = theBitmapAsset;


        }

        protected function finalImage_readyHandler(event:FlexEvent):void {
            // TODO Auto-generated method stub

        }

        protected function shootAgainButn_clickHandler(event:MouseEvent):void {
            this.currentState = "default";
            this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
            backgroundImg.source = Resource.BACKGROUND;

        }

        protected function publishButton_clickHandler(event:MouseEvent):void {
            currentState = "pleasewait";
            theJPG.encodeAsync(compositeBitmap);
            this.stage.setAspectRatio(StageAspectRatio.LANDSCAPE);
            backgroundImg.source = Resource.BACKGROUND;
            backgroundImg.scaleMode = BitmapScaleMode.ZOOM;
        }

        private function hGroup1_updateCompleteHandler(event:FlexEvent):void {
            trace("photo group updated width is:" + event.currentTarget.width)

        }

        private function hGroup1_resizeHandler(event:ResizeEvent):void {
            trace("********** box resized" + event.currentTarget.width);


        }
        ]]>
	</fx:Script>


    <s:states>
        <s:State name="default"/>
        <s:State name="preview"/>
        <s:State name="facebook"/>
        <s:State name="pleasewait"/>
    </s:states>
    <s:BorderContainer width="100%" height="100%" borderVisible="false" backgroundColor="0x000000">
        <s:BitmapImage width="100%" height="100%" smooth="true" source="{Resource.BACKGROUND}" id="backgroundImg"/>
        <s:VGroup includeIn="pleasewait" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
            <s:BusyIndicator horizontalCenter="0" verticalCenter="0" width="100" height="100" rotationInterval="200"
                             symbolColor="#ED1C24" id="busone"/>
            <s:Label text="Processing image please wait.." color="#FFFFFF"/>
            <s:Label id="jpgprogress" text="" color="#FFFFFF"/>

        </s:VGroup>

        <s:VGroup includeIn="preview" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center"
                  id="previewContainer">
            <s:BitmapImage id="finalImage" width="100%"
                           height="{previewContainer.height - copiesHolder.width - finalButtonBar.height - 30}"
                           scaleMode="letterbox" ready="finalImage_readyHandler(event)" smoothingQuality="high"
                           smooth="true"/>
            <s:HGroup id="copiesHolder" horizontalAlign="center" verticalAlign="middle">
                <s:Label color="0xED1C24" fontSize="40" paddingTop="10" text="COPIES"/>
                <s:Spacer width="5"/>
                <s:HSlider id="numPhotos" maximum="10" skinClass="skins.SunglassHslider" minimum="1" width="150"/>
                <s:Spacer width="5"/>
                <s:Label color="0xED1C24" fontSize="40" paddingTop="10" id="numLabel" text="{numPhotos.value}"/>

            </s:HGroup>
            <s:HGroup id="finalButtonBar" horizontalAlign="center" verticalAlign="middle">
                <s:Button label="TAKE AGAIN" id="shootAgainButn" click="shootAgainButn_clickHandler(event)"/>

                <s:Spacer width="40"/>
                <s:Button label="PUBLISH" id="publishButton" click="publishButton_clickHandler(event)"/>


            </s:HGroup>
        </s:VGroup>
        <s:VGroup styleName="Game" horizontalAlign="center" verticalAlign="middle" width="100%" height="592"
                  includeIn="default,facebook">
            <s:VGroup horizontalAlign="center" width="100%" height="100%">
                <s:Label id="statusText" color="#009BD7"/>
                <s:HGroup horizontalAlign="center" verticalAlign="middle"
                          updateComplete="hGroup1_updateCompleteHandler(event)" resize="hGroup1_resizeHandler(event)">
                    <s:VGroup width="33%" height="100%" horizontalAlign="center">
                        <s:Image id="photo1Preview" source="@Embed('../assets/fbsubmission/face01.jpg')"
                                 ready="photo1Preview_readyHandler(event)"
                                 complete="photo1Preview_completeHandler(event)" scaleMode="zoom" smooth="true"/>
                        <s:Button id="takePhotoButton" scaleX="0.9" scaleY="0.9" horizontalCenter="0"
                                  label="TAKE PHOTO 1" click="takePhoto(0)"/>
                    </s:VGroup>
                    <s:Spacer width="10"/>
                    <s:VGroup width="33%" height="100%" horizontalAlign="center">
                        <s:Image id="photo2Preview" source="@Embed('../assets/fbsubmission/face02.jpg')"
                                 ready="photo1Preview_readyHandler(event)"
                                 complete="photo1Preview_completeHandler(event)" scaleMode="zoom" smooth="true"/>
                        <s:Button horizontalCenter="0" scaleX="0.9" scaleY="0.9" label="TAKE PHOTO 2"
                                  click="takePhoto(1)"/>
                    </s:VGroup>
                    <s:Spacer width="10"/>
                    <s:VGroup width="33%" height="100%" horizontalAlign="center">
                        <s:Image id="photo3Preview" source="@Embed('../assets/fbsubmission/face03.jpg')"
                                 ready="photo1Preview_readyHandler(event)"
                                 complete="photo1Preview_completeHandler(event)" scaleMode="zoom" smooth="true"/>
                        <s:Button horizontalCenter="0" scaleX="0.9" scaleY="0.9" label="TAKE PHOTO 3"
                                  click="takePhoto(2)"/>
                    </s:VGroup>
                </s:HGroup>
            </s:VGroup>
            <s:Button label="GENERATE PREVIEW" skinClass="skins.CustomButtonWhite" id="previewButton" enabled="false"
                      click="previewButton_clickHandler(event)"/>
        </s:VGroup>

    </s:BorderContainer>
</s:View>